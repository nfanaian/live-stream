{"ast":null,"code":"var _jsxFileName = \"/Users/navid/Documents/Code/udemy/react/s16/streams/client/src/components/streams/StreamForm.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\");\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  // // Add CTRL+ENTER event listener\n  // componentDidMount() {\n  //   document.addEventListener(\"keydown\", this.keyDownHandler);\n  // }\n  // // Remove CTRL+ENTER event listener\n  // componentWillUnmount() {\n  //   document.removeEventListener(\"keydown\", this.keyDownHandler);\n  // }\n  // // Event listener to submit on CTRL+ENTER\n  // keyDownHandler(e) {\n  //   if (e.keycode === 13 && e.ctrlKey) {\n  //     this.onSubmit();\n  //   }\n  // }\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"streamForm\",\n  validate,\n  enableReinitialize: true\n})(StreamForm);","map":{"version":3,"sources":["/Users/navid/Documents/Code/udemy/react/s16/streams/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","form","enableReinitialize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SA4BvCC,WA5BuC,GA4BzB,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACxC,YAAMC,SAAS,mBAAYD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAnD,CAAf;AACA,aACE;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADF,EAEE,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGG,KAAKM,WAAL,CAAiBJ,IAAjB,CAHH,CADF;AAOD,KArCsC;;AAAA,SAuCvCK,QAvCuC,GAuC5BC,UAAU,IAAI;AACvB,WAAKC,KAAL,CAAWF,QAAX,CAAoBC,UAApB;AACD,KAzCsC;AAAA;;AAEvC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEAF,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC9B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADF,CADF;AAKD;AACF;;AAgBDM,EAAAA,MAAM,GAAG;AACP,WACE;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,MAAA,KAAK,EAAC,mBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAUE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,CADF;AAcD;;AA1DsC;;AA6DzC,MAAMa,QAAQ,GAAGJ,UAAU,IAAI;AAC7B,QAAMK,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AAED,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AAED,SAAOF,MAAP;AACD,CAZD;;AAcA,eAAejB,SAAS,CAAC;AACvBoB,EAAAA,IAAI,EAAE,YADiB;AAEvBJ,EAAAA,QAFuB;AAGvBK,EAAAA,kBAAkB,EAAE;AAHG,CAAD,CAAT,CAIZpB,UAJY,CAAf","sourcesContent":["import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nclass StreamForm extends React.Component {\n\n  // // Add CTRL+ENTER event listener\n  // componentDidMount() {\n  //   document.addEventListener(\"keydown\", this.keyDownHandler);\n  // }\n\n  // // Remove CTRL+ENTER event listener\n  // componentWillUnmount() {\n  //   document.removeEventListener(\"keydown\", this.keyDownHandler);\n  // }\n\n  // // Event listener to submit on CTRL+ENTER\n  // keyDownHandler(e) {\n  //   if (e.keycode === 13 && e.ctrlKey) {\n  //     this.onSubmit();\n  //   }\n  // }\n\n  renderError({ error, touched }) {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n  renderInput = ({ input, label, meta }) => {\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} autoComplete=\"off\" />\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  onSubmit = formValues => {\n    this.props.onSubmit(formValues);\n  };\n\n  render() {\n    return (\n      <form\n        className=\"ui form error\"\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n      >\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n        <Field\n          name=\"description\"\n          component={this.renderInput}\n          label=\"Enter Description\"\n        />\n        <button className=\"ui button primary\">Submit</button>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"streamForm\",\n  validate,\n  enableReinitialize: true\n})(StreamForm);\n"]},"metadata":{},"sourceType":"module"}