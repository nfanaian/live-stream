{"ast":null,"code":"var _jsxFileName = \"/Users/navid/Documents/Code/udemy/react/s16/streams/client/src/components/streams/StreamCreate.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\");\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.keyDownHandler);\n  } // Event listener to submit on CTRL+ENTER\n\n\n  keyDownHandler(e) {\n    if (e.keycode === 13 && e.ctrlKey) {\n      this.onSubmit();\n    }\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  render() {\n    return React.createElement(StreamForm, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/navid/Documents/Code/udemy/react/s16/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","componentDidMount","document","addEventListener","keyDownHandler","componentWillUnmount","removeEventListener","e","keycode","ctrlKey","render","validate","errors","title","description","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;AAGA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAyBzCC,WAzByC,GAyB3B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACxC,YAAMC,SAAS,mBAAYD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAnD,CAAf;AACA,aACE;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADF,EAEE,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGG,KAAKM,WAAL,CAAiBJ,IAAjB,CAHH,CADF;AAOD,KAlCwC;;AAAA,SAoCzCK,QApCyC,GAoC9BC,UAAU,IAAI;AACvB,WAAKC,KAAL,CAAWb,YAAX,CAAwBY,UAAxB;AACD,KAtCwC;AAAA;;AACzCE,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAKC,cAA1C;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrBH,IAAAA,QAAQ,CAACI,mBAAT,CAA6B,SAA7B,EAAwC,KAAKF,cAA7C;AACD,GAPwC,CASzC;;;AACAA,EAAAA,cAAc,CAACG,CAAD,EAAI;AAChB,QAAIA,CAAC,CAACC,OAAF,KAAc,EAAd,IAAoBD,CAAC,CAACE,OAA1B,EAAmC;AACjC,WAAKX,QAAL;AACD;AACF;;AAEDD,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC9B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADF,CADF;AAKD;AACF;;AAgBDe,EAAAA,MAAM,GAAG;AACP,WACA,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAE,KAAKZ,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA;AAGD;;AA5CwC;;AA+C3C,MAAMa,QAAQ,GAAGZ,UAAU,IAAI;AAC7B,QAAMa,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACb,UAAU,CAACc,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AAED,MAAI,CAACd,UAAU,CAACe,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AAED,SAAOF,MAAP;AACD,CAZD;;AAcA,MAAMG,WAAW,GAAG9B,SAAS,CAAC;AAC5B+B,EAAAA,IAAI,EAAE,cADsB;AAE5BL,EAAAA;AAF4B,CAAD,CAAT,CAGjBvB,YAHiB,CAApB;AAKA,eAAeF,OAAO,CACpB,IADoB,EAEpB;AAAEC,EAAAA;AAAF,CAFoB,CAAP,CAGb4B,WAHa,CAAf","sourcesContent":["import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\n\n\nclass StreamCreate extends React.Component {\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyDownHandler);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.keyDownHandler);\n  }\n\n  // Event listener to submit on CTRL+ENTER\n  keyDownHandler(e) {\n    if (e.keycode === 13 && e.ctrlKey) {\n      this.onSubmit();\n    }\n  }\n\n  renderError({ error, touched }) {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n  renderInput = ({ input, label, meta }) => {\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} autoComplete=\"off\" />\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  onSubmit = formValues => {\n    this.props.createStream(formValues);\n  };\n\n  render() {\n    return (\n    <StreamForm onSubmit={this.onSubmit} />\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);\n\nexport default connect(\n  null,\n  { createStream }\n)(formWrapped);\n"]},"metadata":{},"sourceType":"module"}